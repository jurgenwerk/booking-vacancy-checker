const { execSync } = require("child_process");

async function checkAvailability(github, context) {
  try {
      // Run the script and capture output
      const output = execSync("node dist/index.js", { encoding: "utf8" });
    console.log("Script output:", output);

    // Extract available dates from output
    let currentDates = [];
    if (output.includes("‚úÖ Available check-in dates found:")) {
      const datesMatch = output.match(
        /Available check-in dates found: \[(.*?)\]/
      );
      if (datesMatch) {
        currentDates = datesMatch[1]
          .split(",")
          .map((date) => date.trim().replace(/['"]/g, ""));
      }
    }

    // Create a hash of current dates for comparison
    const currentHash = JSON.stringify(currentDates.sort());

    // Look for existing issues to get previous state
    const issues = await github.rest.issues.listForRepo({
      owner: context.repo.owner,
      repo: context.repo.repo,
      labels: "availability",
      state: "all",
      per_page: 10,
      sort: "created",
      direction: "desc",
    });

    let previousHash = null;
    let previousDates = [];

    // Find the most recent availability issue
    const latestIssue = issues.data.find(
      (issue) =>
        issue.title.includes("VIB Vacation Home") &&
        issue.body.includes("**Available dates:**")
    );

    if (latestIssue) {
      // Extract dates from the latest issue
      const bodyMatch = latestIssue.body.match(
        /\*\*Available dates:\*\* (.*?)(?:\n|$)/
      );
      if (bodyMatch) {
        previousDates = bodyMatch[1]
          .split(",")
          .map((date) => date.trim())
          .filter((date) => date);
        previousHash = JSON.stringify(previousDates.sort());
      }
    }

    // Check if results have changed
    const hasChanged = currentHash !== previousHash;

    console.log("Previous dates:", previousDates);
    console.log("Current dates:", currentDates);
    console.log("Has changed:", hasChanged);

    if (hasChanged) {
      // Determine what changed
      const addedDates = currentDates.filter(
        (date) => !previousDates.includes(date)
      );
      const removedDates = previousDates.filter(
        (date) => !currentDates.includes(date)
      );

      let issueTitle = "";
      let issueBody = "";

      if (currentDates.length === 0) {
        issueTitle = "üè† VIB Vacation Home - No Available Dates";
        issueBody =
          "## No Available Dates Found\n\n" +
          "**Date:** " +
          new Date().toLocaleString() +
          "\n" +
          "**Status:** All previously available dates are now booked\n\n" +
          "**Previously available dates:** " +
          (previousDates.length > 0 ? previousDates.join(", ") : "None") +
          "\n\n" +
          "---\n" +
          "*Generated by GitHub Actions*";
      } else if (previousDates.length === 0) {
        issueTitle = "üè† VIB Vacation Home - New Dates Available!";
        issueBody =
          "## New Available Dates Found!\n\n" +
          "**Date:** " +
          new Date().toLocaleString() +
          "\n" +
          "**Available dates:** " +
          currentDates.join(", ") +
          "\n\n" +
          "This is the first time dates have been found!\n\n" +
          "---\n" +
          "*Generated by GitHub Actions*";
      } else {
        issueTitle = "üè† VIB Vacation Home - Availability Changed!";
        issueBody =
          "## Availability Status Changed\n\n" +
          "**Date:** " +
          new Date().toLocaleString() +
          "\n\n" +
          "**Newly available:** " +
          (addedDates.length > 0 ? addedDates.join(", ") : "None") +
          "\n" +
          "**No longer available:** " +
          (removedDates.length > 0 ? removedDates.join(", ") : "None") +
          "\n\n" +
          "**Current available dates:** " +
          currentDates.join(", ") +
          "\n\n" +
          "---\n" +
          "*Generated by GitHub Actions*";
      }

      // Create GitHub issue
      await github.rest.issues.create({
        owner: context.repo.owner,
        repo: context.repo.repo,
        title: issueTitle,
        body: issueBody,
        labels: ["booking", "automated", "availability"],
      });

      console.log("‚úÖ GitHub issue created for availability change");
    } else {
      console.log("‚ÑπÔ∏è No changes detected, no issue created");
    }
  } catch (error) {
    console.error("Error in checkAvailability:", error);
    throw error;
  }
}

module.exports = checkAvailability;
